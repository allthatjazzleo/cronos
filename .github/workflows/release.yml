name: release

on:
  push:
    tags:
      - "v*.*.*"
jobs:
#  releaser:
#    runs-on: ubuntu-latest
#    environment: release
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: true
#      - name: setup release environment
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |-
#          echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > .release-env
#      - name: draft release
#        run: make release
#      - uses: cachix/install-nix-action@v15
#      - uses: cachix/cachix-action@v10
#        with:
#          name: cronos
#          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
#      - name: nix bundle
#        env:
#          DB: rocksdb
#          PLATFORM: Linux_x86_64
#        run: |
#          MAINNET_TAR="cronos_$(echo ${GITHUB_REF##*/} | cut -c 2-)-${DB}_${PLATFORM}.tar.gz"
#          TESTNET_TAR="cronos_$(echo ${GITHUB_REF##*/} | cut -c 2-)-testnet-${DB}_${PLATFORM}.tar.gz"
#          mkdir ./bin
#          nix bundle .
#          mv ./cronosd ./bin
#          tar cfzh "${MAINNET_TAR}" ./bin
#          nix bundle .#cronosd-testnet
#          mv ./cronosd ./bin
#          tar cfzh "${TESTNET_TAR}" ./bin
#          echo 'FILES<<EOF' >> $GITHUB_ENV
#          echo "${MAINNET_TAR}" >> $GITHUB_ENV
#          echo "${TESTNET_TAR}" >> $GITHUB_ENV
#          echo 'EOF' >> $GITHUB_ENV
#          ls -l "${MAINNET_TAR}"
#          ls -l "${TESTNET_TAR}"
#      - name: release linux rocksdb binaries
#        uses: softprops/action-gh-release@v1
#        with:
#          draft: true
#          files: "${{ env.FILES }}"

  releaser-arm64:
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: nix bundle
        id: nix_bundle_arm64
        with:
          arch: aarch64
          distro: ubuntu20.04
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerRunArgs: |
            --volume "${PWD}:/cronos"
          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            DB: rocksdb
            PLATFORM: Linux_arm64
            GITHUB_REF: ${{ env.GITHUB_REF }}
          install: |
            apt-get update && apt-get install --no-install-recommends -y  locales curl xz-utils vim  ca-certificates && apt-get clean && rm -rf /var/lib/apt/lists/* \
                  && mkdir -m 0755 /nix && chown root /nix
            curl -L https://nixos.org/nix/install | bash
            echo "source $HOME/.nix-profile/etc/profile.d/nix.sh" >> "$HOME/.bashrc"
          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /cronos
            MAINNET_TAR="cronos_$(echo ${GITHUB_REF##*/} | cut -c 2-)-${DB}_${PLATFORM}.tar.gz"
            TESTNET_TAR="cronos_$(echo ${GITHUB_REF##*/} | cut -c 2-)-testnet-${DB}_${PLATFORM}.tar.gz"
            mkdir ./bin
            nix bundle .
            mv ./cronosd ./bin
            tar cfzh "${MAINNET_TAR}" ./bin
            nix bundle .#cronosd-testnet
            mv ./cronosd ./bin
            tar cfzh "${TESTNET_TAR}" ./bin
            echo ::set-output name=MAINNET_TAR::${MAINNET_TAR}
            echo ::set-output name=TESTNET_TAR::${TESTNET_TAR}
            ls -l "${MAINNET_TAR}"
            ls -l "${TESTNET_TAR}"
      - name: release linux rocksdb binaries
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            ${{ steps.nix_bundle_arm64.outputs.MAINNET_TAR }}
            ${{ steps.nix_bundle_arm64.outputs.TESTNET_TAR }}